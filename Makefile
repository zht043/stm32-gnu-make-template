# Author: Hongtao Zhang
# Date: 12/30/2019

#########================================USAGE====================================#########
### Description: This makefile is intended to be a convenience tool for stm32 developer to 
### 			 include any user-defined c/c++ source files or third party libraries to work with
###				 the auto-generated project template by the handy stm32CubeMx tool, and to conveniently
###				 modify compling settings or print compiler info. 
### 			 (autogenerated makefile doesn't support c++ out of box, and is subject to be overwritten 
###				  every time CubeMX regenerates)
###				 It also integrates many useful functionalities such as flashing the .elf file  
###				 to the device, print memory usages, create call-graphs etc.   
### System Requirement: MacOS, Linux, Win10 (install WSL Ubuntu subsystem if on Windows)
### Dependencies: stm32CubeMx, arm-none-eabi-gcc tool chain (version 7-2018-q2 update),
### 			  OpenOCD or/and stm32CubeProgrammer, graphviz(optional), cflow(optional)

### Typical Workflow: Create project directory <prj-dir> --> open stm32CubeMx and config device settings
### 		  --> Generate makefile project in stm32CubeMx to <cube-prj-dir> 
###			  --> update <FDIR> variable to be the path of <cube-prj-dir> 
###			  --> add user-defined sources and headers (see FMV bellow)
###			  --> customize the rest of FMVs --> run make 
###			  --> flash .elf file to your stm32 device (through OpenOCD or stm32CubeProgrammer)
###			  --> Debug through OpenOCD GDB server

### Run "make" to invoke the default target build that builds the <target-name>.elf 
### file in the current directory using 8 threads to build faster(default to call "make -j8")
### As dependencies of <target-name>.elf, a <BUILD> directory will be created under the current 
### directory with object files matching each .c, .s, or .cpp source files. When rebuilding,  
### in order to save compile time, make will utillize these object files whose sources files hasn't 
### changed since the last "make".
### project directory tree after make should be like:
### (recommended scheme, <cube-prj-dir> doesn't have to be inside <prj-dir>)
### 	<prj-dir>
###			-<cube-prj-dir> 
###				-Makefile
###				-......
###			-Makefile (this makefile!)
###			-<target>.elf
###			-<BUILD>
###				-*.o (object files)
###				-*.d (dependency files)
###				-*.su (stack usage files)
###				-*.<target>.map (linker map file)
###			-.......
### This makefile includes the autogenerated makefile within <cube-prj-dir> only for extracting
### device-specific or firmware-specific information such as type of cpu, firmware sources and header path, etc.,
### as different stm32 chips utillize different set of compiler settings and firmware libraries.
### Modified the "Frequently Modified Variables" to accustom this file to your own project demands


### Run "make Clean" (uppercase 'C' !) to remove <target-name>.elf and <BUILD> directory

### Run "make flash"

### Run "make print-objs", "make print-sources", "make print-targets", or "make print-flags"
### to see the associated compling info
#########=========================================================================#########

#########=====This is a Frequently Modified Variable (FMV), More FMVs bellow======#########
### CubeMx-generated stm32 project directory (mostly firmware), 
### keep that directory under your project directory: i.e. <prj_dir> / <cube_prj_dir>.
### Contents within <cube_prj_dir> are autogenerated by stm32CubeMx software with 
### its own Makefile (Make sure to set up CubeMX to Makefile mode)
### which is include bellow (see line: include $(FDIR)/Makefile)
### Set FDIR (Firmware Directory) to be the path to <cube_prj_dir> 
FDIR = Firmware
#########=========================================================================#########



#Extract variables from the CubeMX-generated Makefile
include $(FDIR)/Makefile
c_src = $(addprefix $(FDIR)/,$(sort $(C_SOURCES)))
c_inc = $(addprefix -I$(FDIR)/,$(sort $(C_INCLUDES:-I%=%)))
a_src = $(addprefix $(FDIR)/,$(sort $(ASM_SOURCES)))
a_inc = $(addprefix -I$(FDIR)/,$(sort $(ASM_INCLUDES:-I%=%)))
cpu = $(CPU)
fpu = $(FPU)
linkscript = $(FDIR)/$(LDSCRIPT)
DEFAULT_DEFINES = $(C_DEFS)



#########================= Frequently Modified Variables (FMV)====================#########
### Target name
target = GMT

### Name the build directory BUILD as "<Name>" for storing all intermediate object files for faster rebuilding
BUILD = Build

### macros (#define) (append user defines here)
macros = $(DEFAULT_DEFINES) 

### Run time Library standards (Standard Lib(space-consuming!!!): nosys.specs, Nano Lib: nano.specs)
### Note: nano library doesn't support standard printing of float type
rtlib_std = -specs=nosys.specs

### Optimization Level (options: -O0, -O1, -O2, -O3, -Og)
opt = -O0

### Debug(GDB) mode on(1) or off(any other value)
debug = 1

### Compiler path (leave it blank if compiler is added to system path)
compiler_path =

### User-defined sources & headers (for c or asm sources, use c_src+=<loc>/*.c)
SCRDIR = STM32CubeRobotics-Framework
cpp_inc = $(c_inc) \
-I$(SCRDIR)/Drivers/inc \
-I$(SCRDIR)/Modules/inc

cpp_src = \
$(wildcard *.cpp) \
$(wildcard $(SCRDIR)/Drivers/src/*.cpp) \
$(wildcard $(SCRDIR)/Modules/src/*.cpp)

#########=========================================================================#########




.DEFAULT_GOAL:=default
default: 
	make -j8 $(target).elf


#Compliers
compiler_prefix = arm-none-eabi-
cc = $(compiler_path)$(compiler_prefix)gcc
cxx = $(compiler_path)$(compiler_prefix)g++
as = $(compiler_path)$(compiler_prefix)gcc -x assembler-with-cpp
cp = $(compiler_path)$(compiler_prefix)objcopy
sz = $(compiler_path)$(compiler_prefix)size


#Compiler Flags
mcu = $(cpu) -mthumb $(fpu) -mfloat-abi=hard
c_std = -std=gnu11
cpp_std = -std=gnu++14 


###Asembler flags
asflags = $(mcu) $(a_inc) $(opt) \
-Wall -fdata-sections -ffunction-sections -fstack-usage 

###C flags
cflags = $(mcu) $(c_std) $(macros) $(c_inc) $(opt) \
-Wall -fdata-sections -ffunction-sections -fstack-usage \
-MMD -MP -MF"$(@:%.o=%.d)"

###C++ flags
cppflags = $(mcu) $(cpp_std) $(macros) $(cpp_inc) $(opt) \
-Wall -fdata-sections -ffunction-sections -fstack-usage \
-MMD -MP -MF"$(@:%.o=%.d)" -fno-exceptions -fno-rtti \
-fno-threadsafe-statics -fno-use-cxa-atexit

ifeq ($(debug), 1)
cflags += -DDEBUG -g3 -gdwarf-2
cppflags += -DDEBUG -g3 -gdwarf-2
endif

###Linker Flags
libs = -lc -lm -lstdc++ -lsupc++
ldflags = $(mcu) $(rtlib_std) -T$(linkscript) \
-Wl,-Map=$(BUILD)/$(target).map,--cref \
-Wl,--gc-sections -static \
-Wl,--start-group $(libs) -Wl,--end-group


#Make Rules
objs = $(addprefix $(BUILD)/,$(notdir $(a_src:.s=.o)))
vpath %.s $(sort $(dir $(a_src)))

objs += $(addprefix $(BUILD)/,$(notdir $(c_src:.c=.o)))
vpath %.c $(sort $(dir $(c_src)))

objs += $(addprefix $(BUILD)/,$(notdir $(cpp_src:.cpp=.o)))
vpath %.cpp $(sort $(dir $(cpp_src)))

$(BUILD):
	mkdir $@

#####Edit: deleted "-Wa,-a,-ad,-alms=$(BUILD)/$(notdir $(<:.c=.lst))" option
#####Optional: Add -fdump-rtl-expand and run "egypt *.expand > graph.dot" to generate function-call graph (Graphviz)
$(BUILD)/%.o: %.c Makefile | $(BUILD) 
	@$(cc) -c $(cflags) $< -o $@
	@echo '$(cc) -c [.....] $(notdir $<) -o $(notdir $@)'

$(BUILD)/%.o: %.cpp Makefile | $(BUILD) 
	@$(cxx) -c $(cppflags) $< -o $@
	@echo '$(cxx) -c [.....] $(notdir $<) -o $(notdir $@)'

$(BUILD)/%.o: %.s Makefile | $(BUILD)
	@$(as) -c $(asflags) $< -o $@
	@echo '$(as) -c [.....] $(notdir $<) -o $(notdir $@)'

$(target).elf: $(objs) Makefile
	@$(cxx) $(objs) $(ldflags) -o $@
	@echo '$(cxx) [...all objs...] [...ldflags...] -o $@'
	$(sz) $@

###special treatment for main.c (shut the implicit function declaration warning)
$(BUILD)/main.o: main.c Makefile | $(BUILD)
	@$(cc) -c $(cflags) -Wno-implicit-function-declaration $< -o $@
	@echo '$(cc) -c [.....] $(notdir $<) -o $(notdir $@)'

-include $(wildcard $(BUILD)/*.d)

#PHONY Targets
.PHONY: 
	default 
	Clean 
	print-objs 
	print-sources 
	print-target
	print-flags

#Clean
Clean:
	-rm -fR $(BUILD)
	-rm $(target).elf

#Print Info
print-objs:
	@echo "$(objs)" | tr " " "\n"

print-target:
	@echo "$(target)"

print-flags:
	@echo "==================================================================="
	@echo "Assembly Flags:"
	@echo "$(asflags)" | fold -w 80
	@echo "==================================================================="	
	@echo "C Flags:"
	@echo "$(cflags)" | fold -w 80
	@echo "==================================================================="
	@echo "C++ Flags:"
	@echo "$(cppflags)" | fold -w 80
	@echo "==================================================================="	
	@echo "Linker Flags:"
	@echo "$(ldflags)" | fold -w 80
	@echo "==================================================================="	

print-sources: 
	@echo "==================================================================="
	@echo "Link Scripts:"
	@echo "$(linkscript)" | tr " " "\n"
	@echo "==================================================================="
	@echo "Assembly Sources:"
	@echo "$(a_src)" | tr " " "\n"
	@echo "==================================================================="
	@echo "Assembly Includes:"
	@echo "$(a_inc)" | tr " " "\n"
	@echo "==================================================================="
	@echo "C Sources:"
	@echo "$(c_src)" | tr " " "\n"
	@echo "==================================================================="
	@echo "C Includes:"
	@echo "$(c_inc)" | tr " " "\n"
	@echo "==================================================================="
	@echo "C++ Sources:"
	@echo "$(cpp_src)" | tr " " "\n"
	@echo "==================================================================="
	@echo "C++ Includes:"
	@echo "$(cpp_inc)" | tr " " "\n"
	@echo "==================================================================="

print-size: $(target).elf
	@$(sz) $<


#utility

#call graph generator using cflow, c only, c++ not supported
call-graph: callgraph
	@cflow $(c_src) | tree2dotx > callgraph/cgraph.dot
	@dot callgraph/cgraph.dot -Tsvg > callgraph/cgraph.svg
callgraph:
	@mkdir $@

